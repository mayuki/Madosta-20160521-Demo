@using System.Security.Claims
@using System.Security.Principal
@using WebApplication6.Models
@using WebApplication6.Infrastracture

@{
    ViewData["Title"] = "Home Page";
}


@if (User.Identity.IsAuthenticated)
{
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            if ((window.webauthn && !(window.sessionStorage && window.sessionStorage.getItem('credentialID.@(((ClaimsIdentity)User.Identity).GetUserId())')) || !window.sessionStorage.getItem('credentialIDRegistered'))) {
                //window.location.href = "/Authentication/RequireFidoRegistration";
                document.querySelector('#signin-with-windowshello-panel').style.display = 'block';
            }
        });

        var challenge = '@FidoAuthenticator.GetChallenge()';
        var userAccountInformation = {
            rpDisplayName: 'Windows Konnichiwa!',
            displayName: '@(((ClaimsIdentity)User.Identity).GetUserId())',
            name: '@(((ClaimsIdentity)User.Identity).GetUserId())',
            id: '@(((ClaimsIdentity)User.Identity).GetUserId())'
        };
        var cryptoParams = [
            {
                type: "ScopedCred",
                algorithm: "RSASSA-PKCS1-v1_5",
            }
        ];
        document.addEventListener('DOMContentLoaded', () => {
            document.querySelector('#register').addEventListener('click', (e) => {
                e.preventDefault();

                webauthn.makeCredential(userAccountInformation, cryptoParams, challenge)
                    .then(function (creds) {
                        window.sessionStorage.setItem('credentialID.' + creds.credential.id, creds.credential.id);
                        window.sessionStorage.setItem('credentialIDRegistered', 'true');
                        document.querySelector('[name=id]').value = creds.credential.id;
                        document.querySelector('[name=publicKey]').value = JSON.stringify(creds.publicKey);
                        document.querySelector('form').submit();
                    }).catch(function (err) {
                        alert(err);
                    });
            });
        })
    </script>
}

@if (Model.AuthenticationSucceeded && User.Identity.IsAuthenticated)
{
    <div class="alert alert-success" role="alert">
        ユーザー @User.Identity.Name (@(((ClaimsIdentity)User.Identity).GetUserId())) としてサインインしました。
    </div>

    <div class="alert alert-info" role="info" id="signin-with-windowshello-panel" style="display:none;">
        <form action="@Url.Action("RegisterFidoPubkey", "Authentication")" method="POST">
            @Html.Hidden("id")
            @Html.Hidden("publicKey")
            Windows Helloでサインインできるように登録する
             <button id="register" class="btn btn-primary">登録する</button>
        </form>
    </div>
}
@if (Model.RegistrationSucceeded)
{
    <div class="alert alert-success" role="alert">
        Windows Helloによる資格情報を登録しました。
    </div>
}
@if (Model.SignOutCompleted)
{
    <div class="alert alert-info" role="alert">
        サインアウトしました。
    </div>
}

<div class="row">
    <div class="col-md-6">
        <h2>このデモサイトについて</h2>
        <p>このデモサイトでは以下のEdge (14342)以降の機能を試せます。</p>
        <ul>
            <li>Beacon</li>
            <li>Web Notification</li>
            <li>Windows Hello</li>
        </ul>
    </div>
    <div class="col-md-6">
        <h2>Windows Hello</h2>
        <p>Windows Helloを試すには以下の手順でサインイン等を行ってください</p>
        <ul>
            <li>サインインページからユーザーを登録する (ユーザー名とパスワードは適当に)</li>
            <li>サインインする</li>
            <li>Windows Helloの認証情報を登録する</li>
            <li>サインアウトする</li>
            <li>Windows Helloでサインインする</li>
        </ul>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <script async class="speakerdeck-embed" data-id="e8cb6a9a63a3476680fbf23a739e5e0a" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>
    </div>
</div>
